{"version":3,"sources":["components/Error.jsx","lib/aux-functions.js","components/Infos.jsx","components/Card.jsx","lib/hooks.js","App.jsx","index.js"],"names":["Error","props","console","log","error","errorCode","request","status","errorMessage","statusText","className","convertToCelsius","k","parseFloat","range","start","end","Array","fill","map","elem","i","Infos","cityInfo","weather","data","main","description","icon","convert","temp","Math","round","tempMin","temp_min","tempMax","temp_max","feelsLike","feels_like","tempCelsius","local","city","src","country","alt","title","t","rangeTemp","r","includes","max","apply","colorTherm","pressure","humidity","Card","params","useState","setData","loading","setLoading","setError","fetchData","a","fetch","process","response","json","useEffect","useFetch","cities","sort","App","split","key","target","rel","href","rootElement","document","querySelector","ReactDOM","render"],"mappings":"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","file":"static/js/main.fab8c250.chunk.js","sourcesContent":["/*\n  @brief Component with the error handler\n  @params Props with infos about the error\n\n  eslint-disable react/prop-types\n*/\n\nimport React from 'react';\n\nconst Error = (props) => {\n  console.log(props.error)\n  let errorCode = props.error.request.status;\n  let errorMessage = props.error.request.statusText;\n  \n  return(\n    <div className='errors'>\n      <p>Sorry, there was an error!</p>\n      <p>{`Code:${errorCode} - ${errorMessage}`}</p>   \n    </div>\n  )\n}\n\nexport default Error;","export const convertToCelsius = (k) => parseFloat(k) - 273.15;\n\nexport const convertToFahrenheit = (k) => (convertToCelsius(k) * 9 / 5) + 32;\n\nexport const range = (start, end) => new Array(end-start+1).fill(0).map((elem,i) => elem=i+start);","/* eslint-disable react/prop-types */\n/* \n  @brief Component with the infos about weather\n  @params Props with data of weather and local\n*/\nimport React from 'react';\nimport './../lib/aux-functions';\nimport { convertToCelsius, range } from './../lib/aux-functions';\n\nconst Infos = (props) => {\n  let cityInfo = {\n    weather: props.data.weather[0].main,\n    description: props.data.weather[0].description,\n    icon: props.data.weather[0].icon,\n    ...props.data.main\n  }\n\n  const convert = convertToCelsius;\n  const unit = 'C'\n  const temp = Math.round(convert(cityInfo.temp));\n  const tempMin = Math.round(convert(cityInfo.temp_min));\n  const tempMax = Math.round(convert(cityInfo.temp_max));\n  const feelsLike = Math.round(convert(cityInfo.feels_like));\n  const tempCelsius = (unit === 'C') ? temp : Math.round(convertToCelsius(cityInfo.temp));\n  \n  /*\n    @brief This function determines the color of temp for inclusion of that in the ranges\n    @params t = temperatura\n    @return the color string\n  */\n\n  const colorTherm = (t) =>{\n    const colorRanges = [range(1, 10), range(11, 20), range(21, 30), range(31, 50)];\n    const colors = ['blue', 'green', 'yellow', 'orange']\n\n    const rangeTemp = colorRanges.map((r, i) => r.includes(t) ? i : -1);\n    \n    return colors[Math.max.apply(null, rangeTemp)];\n  };\n\n\n  return (\n    <div>\n      <p className='cardTitle'>\n        {props.local.city}&#160;&#160;\n        <img \n          src={`./icons/${props.local.country}.png`} \n          alt={`.${props.local.country}`} \n          className='cardTitleImg'\n        />\n      </p>\n      <div className='infoSection'>\n        <img \n          src={`http://openweathermap.org/img/wn/${cityInfo.icon}@2x.png`}\n          title={`${cityInfo.description}`} \n          alt={`${cityInfo.weather}`}\n          className='icon' \n        />\n        <div>\n          <p className={`temp ${colorTherm(tempCelsius)}`}>\n            {`${temp}º${unit}`}\n          </p>\n          <p>\n            <span>Min: {`${tempMin}º${unit}`}&#160;&#160;</span>\n            <span>Max: {`${tempMax}º${unit}`}</span>\n          </p>\n          <p>\n            <span>Pressure: {`${cityInfo.pressure}`} hPa&#160;&#160;</span>\n            <span>Humidity: {`${cityInfo.humidity}`} %</span>\n          </p>\n          <p>\n            Feels like: {`${feelsLike}`}º\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Infos;","/*\n  @brief Component with the card\n  @params Props with city and country of local\n\n  eslint-disable react/prop-types\n*/\n\nimport React from 'react';\nimport { useFetch } from '../lib/hooks';\nimport Error from './Error';\nimport Infos from './Infos';\n\nconst Card = (props) => {\n  let local = {...props}\n  // eslint-disable-next-line react/prop-types\n  let [data, loading, error] = useFetch({ city: props.city, country: props.country });\n     \n  if (error) {\n    return <Error error={error}/>\n  }\n\n  return (\n    <div className='cards'>\n      {loading ? 'Loading...' : <Infos data={data} local={local}/>}\n    </div>\n  )\n\n\n}\n\nexport default Card;","import { useState, useEffect } from 'react';\n\n// eslint-disable-next-line no-undef\nconst apiKey = process.env.REACT_APP_API_KEY;\nconst endPoint = 'http://api.openweathermap.org/data/2.5/weather'\n\nconst useFetch = (params) => {\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  let city = params.city;\n  let country = params.country;\n  \n  const fetchData = async (city, country) => {\n    try {\n      const response = await fetch(`${endPoint}?q=${city},${country}&appid=${apiKey}`);\n      const json = await response.json();\n\n      setData(json);\n    }\n    catch (error) {\n      setError(error);\n      console.error(error);\n    }\n    finally {\n      setLoading(false);\n    }\n  }\n\n  useEffect(() => {\n    fetchData(city,country)\n  },[city,country]);\n\n  return [data, loading, error];\n}\n\nexport { useFetch };","import React from 'react';\nimport Card from './components/Card';\n\nconst cities = ['Esperança,br', 'Natal,br', 'Montreal,ca', 'São Paulo,br', 'London,uk', 'Tokio,jp'].sort();\n\nconst App = () => {\n  return (\n    <div>\n      <div className='title'> Weather Report </div>\n      <div className='cardsGroup'>\n        {cities.map(local => {\n          let [city, country] = local.split(',');\n          return (<Card key={city} city={city} country={country} />);\n        })}\n        <footer>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://www.linkedin.com/in/andrecio-costa-bezerra-59980a171/\"\n            className=\"name\"\n          >\n            Featured by Andrécio Bezerra\n        </a>\n          < a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com\" className=\"icons8\">\n            Icons by Icons8\n        </a >\n        </footer>\n      </div>\n    </div>\n  )\n}\n\nexport default App;","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n \nconst rootElement = document.querySelector('#root')\n\nReactDOM.render(<App/>, rootElement)"],"sourceRoot":""}